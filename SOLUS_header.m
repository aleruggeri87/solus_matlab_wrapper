function [methodinfo,structs,enuminfo,ThunkLibName]=SOLUS_header
%SOLUS_HEADER Create structures to define interfaces found in 'SOLUS_SDK'.

%This function was generated by loadlibrary.m parser version 1.1.6.36 on Sun Nov 24 11:47:52 2019
%perl options:'SOLUS_SDK.i -outfile=SOLUS_header.m -thunkfile=SOLUS_SDK_thunk_pcwin64.c -header=SOLUS_SDK.h'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'SOLUS_SDK_thunk_pcwin64');
%  SOLUS_Return SOLUS_Constr ( SOLUS_H * SOLUS , Opt_Present * OptList ); 
fcns.thunkname{fcnNum}='SOLUS_ReturnvoidPtrvoidPtrThunk';fcns.name{fcnNum}='SOLUS_Constr'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='SOLUS_Return'; fcns.RHS{fcnNum}={'s_SOLUS_HPtrPtr', 'uint8Ptr'};fcnNum=fcnNum+1;
%  SOLUS_Return SOLUS_Destr ( SOLUS_H SOLUS ); 
fcns.thunkname{fcnNum}='SOLUS_ReturnvoidPtrThunk';fcns.name{fcnNum}='SOLUS_Destr'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='SOLUS_Return'; fcns.RHS{fcnNum}={'s_SOLUS_HPtr'};fcnNum=fcnNum+1;
%  void PrintErrorCode ( const char * FunName , SOLUS_Return retcode ); 
fcns.thunkname{fcnNum}='voidcstringSOLUS_ReturnThunk';fcns.name{fcnNum}='PrintErrorCode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring', 'SOLUS_Return'};fcnNum=fcnNum+1;
%  SOLUS_Return SOLUS_SetOptodeRegs ( SOLUS_H solus , ADDRESS optode , LDs_registers * LD_Registers , GSIPM_config_reg * GSIPM_Registers ); 
fcns.thunkname{fcnNum}='SOLUS_ReturnvoidPtrADDRESSvoidPtrvoidPtrThunk';fcns.name{fcnNum}='SOLUS_SetOptodeRegs'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='SOLUS_Return'; fcns.RHS{fcnNum}={'s_SOLUS_HPtr', 'ADDRESS', 'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
%  SOLUS_Return SOLUS_SetOptodeParams ( SOLUS_H solus , ADDRESS optode , LD_parameters LD_Parameters , GSIPM_parameters GSIPM_parameters ); 
fcns.thunkname{fcnNum}='SOLUS_ReturnvoidPtrADDRESSLD_parametersGSIPM_parametersThunk';fcns.name{fcnNum}='SOLUS_SetOptodeParams'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='SOLUS_Return'; fcns.RHS{fcnNum}={'s_SOLUS_HPtr', 'ADDRESS', 'LD_parameters', 'GSIPM_parameters'};fcnNum=fcnNum+1;
%  SOLUS_Return SOLUS_SetCalibrationMap ( SOLUS_H solus , ADDRESS optode , CalMap * data , UINT16 MaxArea ); 
fcns.thunkname{fcnNum}='SOLUS_ReturnvoidPtrADDRESSvoidPtruint16Thunk';fcns.name{fcnNum}='SOLUS_SetCalibrationMap'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='SOLUS_Return'; fcns.RHS{fcnNum}={'s_SOLUS_HPtr', 'ADDRESS', 'uint16Ptr', 'uint16'};fcnNum=fcnNum+1;
%  SOLUS_Return SOLUS_SetAutocalParams ( SOLUS_H solus , Autocal_params Params ); 
fcns.thunkname{fcnNum}='SOLUS_ReturnvoidPtrAutocal_paramsThunk';fcns.name{fcnNum}='SOLUS_SetAutocalParams'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='SOLUS_Return'; fcns.RHS{fcnNum}={'s_SOLUS_HPtr', 'Autocal_params'};fcnNum=fcnNum+1;
%  SOLUS_Return SOLUS_SetSequenceLL ( SOLUS_H solus , Sequence_LL * sequence , ADDRESS optode ); 
fcns.thunkname{fcnNum}='SOLUS_ReturnvoidPtrvoidPtrADDRESSThunk';fcns.name{fcnNum}='SOLUS_SetSequenceLL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='SOLUS_Return'; fcns.RHS{fcnNum}={'s_SOLUS_HPtr', 'voidPtr', 'ADDRESS'};fcnNum=fcnNum+1;
%  SOLUS_Return SOLUS_SetSequence ( SOLUS_H solus , Sequence * sequence ); 
fcns.thunkname{fcnNum}='SOLUS_ReturnvoidPtrvoidPtrThunk';fcns.name{fcnNum}='SOLUS_SetSequence'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='SOLUS_Return'; fcns.RHS{fcnNum}={'s_SOLUS_HPtr', 'voidPtr'};fcnNum=fcnNum+1;
%  SOLUS_Return SOLUS_SetFlags ( SOLUS_H solus , UINT16 flags , UINT16 mask ); 
fcns.thunkname{fcnNum}='SOLUS_ReturnvoidPtruint16uint16Thunk';fcns.name{fcnNum}='SOLUS_SetFlags'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='SOLUS_Return'; fcns.RHS{fcnNum}={'s_SOLUS_HPtr', 'uint16', 'uint16'};fcnNum=fcnNum+1;
%  SOLUS_Return SOLUS_SetLaserFrequency ( SOLUS_H solus , UINT32 Frequency ); 
fcns.thunkname{fcnNum}='SOLUS_ReturnvoidPtruint32Thunk';fcns.name{fcnNum}='SOLUS_SetLaserFrequency'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='SOLUS_Return'; fcns.RHS{fcnNum}={'s_SOLUS_HPtr', 'uint32'};fcnNum=fcnNum+1;
%  SOLUS_Return SOLUS_ReadOptodeRegs ( SOLUS_H solus , ADDRESS optode ); 
fcns.thunkname{fcnNum}='SOLUS_ReturnvoidPtrADDRESSThunk';fcns.name{fcnNum}='SOLUS_ReadOptodeRegs'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='SOLUS_Return'; fcns.RHS{fcnNum}={'s_SOLUS_HPtr', 'ADDRESS'};fcnNum=fcnNum+1;
%  SOLUS_Return SOLUS_GetOptodeRegs ( SOLUS_H solus , ADDRESS optode , LDs_registers * LD_Registers , GSIPM_config_reg * GSIPM_Registers ); 
fcns.thunkname{fcnNum}='SOLUS_ReturnvoidPtrADDRESSvoidPtrvoidPtrThunk';fcns.name{fcnNum}='SOLUS_GetOptodeRegs'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='SOLUS_Return'; fcns.RHS{fcnNum}={'s_SOLUS_HPtr', 'ADDRESS', 'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
%  SOLUS_Return SOLUS_GetOptodeParams ( SOLUS_H solus , ADDRESS optode , LD_parameters * LD_Parameters , GSIPM_parameters * GSIPM_parameters ); 
fcns.thunkname{fcnNum}='SOLUS_ReturnvoidPtrADDRESSvoidPtrvoidPtrThunk';fcns.name{fcnNum}='SOLUS_GetOptodeParams'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='SOLUS_Return'; fcns.RHS{fcnNum}={'s_SOLUS_HPtr', 'ADDRESS', 'LD_parametersPtr', 'GSIPM_parametersPtr'};fcnNum=fcnNum+1;
%  SOLUS_Return SOLUS_ReadCalibrationMap ( SOLUS_H solus , ADDRESS optode ); 
fcns.thunkname{fcnNum}='SOLUS_ReturnvoidPtrADDRESSThunk';fcns.name{fcnNum}='SOLUS_ReadCalibrationMap'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='SOLUS_Return'; fcns.RHS{fcnNum}={'s_SOLUS_HPtr', 'ADDRESS'};fcnNum=fcnNum+1;
%  SOLUS_Return SOLUS_GetCalibrationMap ( SOLUS_H solus , ADDRESS optode , CalMap * data , UINT16 * MaxArea ); 
fcns.thunkname{fcnNum}='SOLUS_ReturnvoidPtrADDRESSvoidPtrvoidPtrThunk';fcns.name{fcnNum}='SOLUS_GetCalibrationMap'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='SOLUS_Return'; fcns.RHS{fcnNum}={'s_SOLUS_HPtr', 'ADDRESS', 'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  SOLUS_Return SOLUS_GetSequenceLL ( SOLUS_H solus , Sequence_LL * sequence , ADDRESS optode ); 
fcns.thunkname{fcnNum}='SOLUS_ReturnvoidPtrvoidPtrADDRESSThunk';fcns.name{fcnNum}='SOLUS_GetSequenceLL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='SOLUS_Return'; fcns.RHS{fcnNum}={'s_SOLUS_HPtr', 'voidPtr', 'ADDRESS'};fcnNum=fcnNum+1;
%  SOLUS_Return SOLUS_GetSequence ( SOLUS_H solus , Sequence * sequence ); 
fcns.thunkname{fcnNum}='SOLUS_ReturnvoidPtrvoidPtrThunk';fcns.name{fcnNum}='SOLUS_GetSequence'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='SOLUS_Return'; fcns.RHS{fcnNum}={'s_SOLUS_HPtr', 'voidPtr'};fcnNum=fcnNum+1;
%  SOLUS_Return SOLUS_GetFlags ( SOLUS_H solus , UINT16 * flags ); 
fcns.thunkname{fcnNum}='SOLUS_ReturnvoidPtrvoidPtrThunk';fcns.name{fcnNum}='SOLUS_GetFlags'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='SOLUS_Return'; fcns.RHS{fcnNum}={'s_SOLUS_HPtr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  SOLUS_Return SOLUS_ReadStatusOptode ( SOLUS_H solus , ADDRESS optode ); 
fcns.thunkname{fcnNum}='SOLUS_ReturnvoidPtrADDRESSThunk';fcns.name{fcnNum}='SOLUS_ReadStatusOptode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='SOLUS_Return'; fcns.RHS{fcnNum}={'s_SOLUS_HPtr', 'ADDRESS'};fcnNum=fcnNum+1;
%  SOLUS_Return SOLUS_GetStatusOptode ( SOLUS_H solus , ADDRESS optode , UINT16 * status , LDs_status * LD_Status ); 
fcns.thunkname{fcnNum}='SOLUS_ReturnvoidPtrADDRESSvoidPtrvoidPtrThunk';fcns.name{fcnNum}='SOLUS_GetStatusOptode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='SOLUS_Return'; fcns.RHS{fcnNum}={'s_SOLUS_HPtr', 'ADDRESS', 'uint16Ptr', 'voidPtr'};fcnNum=fcnNum+1;
%  SOLUS_Return SOLUS_ReadStatusControl ( SOLUS_H solus ); 
fcns.thunkname{fcnNum}='SOLUS_ReturnvoidPtrThunk';fcns.name{fcnNum}='SOLUS_ReadStatusControl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='SOLUS_Return'; fcns.RHS{fcnNum}={'s_SOLUS_HPtr'};fcnNum=fcnNum+1;
%  SOLUS_Return SOLUS_GetStatusControl ( SOLUS_H solus , UINT16 * status ); 
fcns.thunkname{fcnNum}='SOLUS_ReturnvoidPtrvoidPtrThunk';fcns.name{fcnNum}='SOLUS_GetStatusControl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='SOLUS_Return'; fcns.RHS{fcnNum}={'s_SOLUS_HPtr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  SOLUS_Return SOLUS_ReadLaserFrequency ( SOLUS_H solus ); 
fcns.thunkname{fcnNum}='SOLUS_ReturnvoidPtrThunk';fcns.name{fcnNum}='SOLUS_ReadLaserFrequency'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='SOLUS_Return'; fcns.RHS{fcnNum}={'s_SOLUS_HPtr'};fcnNum=fcnNum+1;
%  SOLUS_Return SOLUS_GetLaserFrequency ( SOLUS_H solus , UINT32 * Frequency ); 
fcns.thunkname{fcnNum}='SOLUS_ReturnvoidPtrvoidPtrThunk';fcns.name{fcnNum}='SOLUS_GetLaserFrequency'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='SOLUS_Return'; fcns.RHS{fcnNum}={'s_SOLUS_HPtr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  SOLUS_Return SOLUS_StartSequence ( SOLUS_H solus , DataType type ); 
fcns.thunkname{fcnNum}='SOLUS_ReturnvoidPtrDataTypeThunk';fcns.name{fcnNum}='SOLUS_StartSequence'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='SOLUS_Return'; fcns.RHS{fcnNum}={'s_SOLUS_HPtr', 'DataType'};fcnNum=fcnNum+1;
%  SOLUS_Return SOLUS_StopSequence ( SOLUS_H solus ); 
fcns.thunkname{fcnNum}='SOLUS_ReturnvoidPtrThunk';fcns.name{fcnNum}='SOLUS_StopSequence'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='SOLUS_Return'; fcns.RHS{fcnNum}={'s_SOLUS_HPtr'};fcnNum=fcnNum+1;
%  SOLUS_Return SOLUS_QueryNLinesAvailable ( SOLUS_H solus , UINT16 * NLines ); 
fcns.thunkname{fcnNum}='SOLUS_ReturnvoidPtrvoidPtrThunk';fcns.name{fcnNum}='SOLUS_QueryNLinesAvailable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='SOLUS_Return'; fcns.RHS{fcnNum}={'s_SOLUS_HPtr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  SOLUS_Return SOLUS_GetMeasurement ( SOLUS_H solus , Data_H * data , UINT16 NLines ); 
fcns.thunkname{fcnNum}='SOLUS_ReturnvoidPtrvoidPtruint16Thunk';fcns.name{fcnNum}='SOLUS_GetMeasurement'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='SOLUS_Return'; fcns.RHS{fcnNum}={'s_SOLUS_HPtr', 'FramePtrPtr', 'uint16'};fcnNum=fcnNum+1;
%  SOLUS_Return SOLUS_TriggerCalibration ( SOLUS_H solus ); 
fcns.thunkname{fcnNum}='SOLUS_ReturnvoidPtrThunk';fcns.name{fcnNum}='SOLUS_TriggerCalibration'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='SOLUS_Return'; fcns.RHS{fcnNum}={'s_SOLUS_HPtr'};fcnNum=fcnNum+1;
%  SOLUS_Return SOLUS_SaveEEPROM ( SOLUS_H solus , ADDRESS address ); 
fcns.thunkname{fcnNum}='SOLUS_ReturnvoidPtrADDRESSThunk';fcns.name{fcnNum}='SOLUS_SaveEEPROM'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='SOLUS_Return'; fcns.RHS{fcnNum}={'s_SOLUS_HPtr', 'ADDRESS'};fcnNum=fcnNum+1;
%  SOLUS_Return SOLUS_ReadEEPROM ( SOLUS_H solus , ADDRESS address , UINT8 * data ); 
fcns.thunkname{fcnNum}='SOLUS_ReturnvoidPtrADDRESSvoidPtrThunk';fcns.name{fcnNum}='SOLUS_ReadEEPROM'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='SOLUS_Return'; fcns.RHS{fcnNum}={'s_SOLUS_HPtr', 'ADDRESS', 'uint8Ptr'};fcnNum=fcnNum+1;
%  SOLUS_Return SOLUS_ReadDiagOptode ( SOLUS_H solus , ADDRESS Optode ); 
fcns.thunkname{fcnNum}='SOLUS_ReturnvoidPtrADDRESSThunk';fcns.name{fcnNum}='SOLUS_ReadDiagOptode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='SOLUS_Return'; fcns.RHS{fcnNum}={'s_SOLUS_HPtr', 'ADDRESS'};fcnNum=fcnNum+1;
%  SOLUS_Return SOLUS_GetDiagOptode ( SOLUS_H solus , ADDRESS Optode , LDs_analog * LD_Analog , Optode_analog_acq * Optode_Analog ); 
fcns.thunkname{fcnNum}='SOLUS_ReturnvoidPtrADDRESSvoidPtrvoidPtrThunk';fcns.name{fcnNum}='SOLUS_GetDiagOptode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='SOLUS_Return'; fcns.RHS{fcnNum}={'s_SOLUS_HPtr', 'ADDRESS', 'uint16Ptr', 'Optode_analog_acqPtr'};fcnNum=fcnNum+1;
%  SOLUS_Return SOLUS_ReadDiagControl ( SOLUS_H solus ); 
fcns.thunkname{fcnNum}='SOLUS_ReturnvoidPtrThunk';fcns.name{fcnNum}='SOLUS_ReadDiagControl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='SOLUS_Return'; fcns.RHS{fcnNum}={'s_SOLUS_HPtr'};fcnNum=fcnNum+1;
%  SOLUS_Return SOLUS_GetDiagControl ( SOLUS_H solus , Control_analog_acq * Control_Analog ); 
fcns.thunkname{fcnNum}='SOLUS_ReturnvoidPtrvoidPtrThunk';fcns.name{fcnNum}='SOLUS_GetDiagControl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='SOLUS_Return'; fcns.RHS{fcnNum}={'s_SOLUS_HPtr', 'Control_analog_acqPtr'};fcnNum=fcnNum+1;
%  SOLUS_Return SOLUS_ResetMCU ( SOLUS_H solus , ADDRESS address ); 
fcns.thunkname{fcnNum}='SOLUS_ReturnvoidPtrADDRESSThunk';fcns.name{fcnNum}='SOLUS_ResetMCU'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='SOLUS_Return'; fcns.RHS{fcnNum}={'s_SOLUS_HPtr', 'ADDRESS'};fcnNum=fcnNum+1;
%  SOLUS_Return SOLUS_TriggerBootLoader ( SOLUS_H solus , ADDRESS address , char * path ); 
fcns.thunkname{fcnNum}='SOLUS_ReturnvoidPtrADDRESScstringThunk';fcns.name{fcnNum}='SOLUS_TriggerBootLoader'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='SOLUS_Return'; fcns.RHS{fcnNum}={'s_SOLUS_HPtr', 'ADDRESS', 'cstring'};fcnNum=fcnNum+1;
%  SOLUS_Return SOLUS_GetFWVersion ( SOLUS_H solus , ADDRESS address , UINT16 * FW_ver ); 
fcns.thunkname{fcnNum}='SOLUS_ReturnvoidPtrADDRESSvoidPtrThunk';fcns.name{fcnNum}='SOLUS_GetFWVersion'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='SOLUS_Return'; fcns.RHS{fcnNum}={'s_SOLUS_HPtr', 'ADDRESS', 'uint16Ptr'};fcnNum=fcnNum+1;
%  SOLUS_Return SOLUS_ReadMCU_ID ( SOLUS_H solus , ADDRESS address ); 
fcns.thunkname{fcnNum}='SOLUS_ReturnvoidPtrADDRESSThunk';fcns.name{fcnNum}='SOLUS_ReadMCU_ID'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='SOLUS_Return'; fcns.RHS{fcnNum}={'s_SOLUS_HPtr', 'ADDRESS'};fcnNum=fcnNum+1;
%  SOLUS_Return SOLUS_GetMCU_ID ( SOLUS_H solus , ADDRESS address , UINT16 * id ); 
fcns.thunkname{fcnNum}='SOLUS_ReturnvoidPtrADDRESSvoidPtrThunk';fcns.name{fcnNum}='SOLUS_GetMCU_ID'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='SOLUS_Return'; fcns.RHS{fcnNum}={'s_SOLUS_HPtr', 'ADDRESS', 'uint16Ptr'};fcnNum=fcnNum+1;
%  SOLUS_Return SOLUS_PowerSupplyON ( SOLUS_H solus , ADDRESS address , UINT16 config ); 
fcns.thunkname{fcnNum}='SOLUS_ReturnvoidPtrADDRESSuint16Thunk';fcns.name{fcnNum}='SOLUS_PowerSupplyON'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='SOLUS_Return'; fcns.RHS{fcnNum}={'s_SOLUS_HPtr', 'ADDRESS', 'uint16'};fcnNum=fcnNum+1;
%  SOLUS_Return SOLUS_PowerSupplyOFF ( SOLUS_H solus , ADDRESS address , UINT16 config ); 
fcns.thunkname{fcnNum}='SOLUS_ReturnvoidPtrADDRESSuint16Thunk';fcns.name{fcnNum}='SOLUS_PowerSupplyOFF'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='SOLUS_Return'; fcns.RHS{fcnNum}={'s_SOLUS_HPtr', 'ADDRESS', 'uint16'};fcnNum=fcnNum+1;
%  SOLUS_Return SOLUS_LaserOFF ( SOLUS_H solus ); 
fcns.thunkname{fcnNum}='SOLUS_ReturnvoidPtrThunk';fcns.name{fcnNum}='SOLUS_LaserOFF'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='SOLUS_Return'; fcns.RHS{fcnNum}={'s_SOLUS_HPtr'};fcnNum=fcnNum+1;
%  SOLUS_Return SOLUS_LaserON ( SOLUS_H solus , ADDRESS address , UINT8 laser ); 
fcns.thunkname{fcnNum}='SOLUS_ReturnvoidPtrADDRESSuint8Thunk';fcns.name{fcnNum}='SOLUS_LaserON'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='SOLUS_Return'; fcns.RHS{fcnNum}={'s_SOLUS_HPtr', 'ADDRESS', 'uint8'};fcnNum=fcnNum+1;
%  SOLUS_Return SOLUS_SetControlParams ( SOLUS_H solus , Control_params Params ); 
fcns.thunkname{fcnNum}='SOLUS_ReturnvoidPtrControl_paramsThunk';fcns.name{fcnNum}='SOLUS_SetControlParams'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='SOLUS_Return'; fcns.RHS{fcnNum}={'s_SOLUS_HPtr', 'Control_params'};fcnNum=fcnNum+1;
%  SOLUS_Return SOLUS_GetControlParams ( SOLUS_H solus , Control_params * Params ); 
fcns.thunkname{fcnNum}='SOLUS_ReturnvoidPtrvoidPtrThunk';fcns.name{fcnNum}='SOLUS_GetControlParams'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='SOLUS_Return'; fcns.RHS{fcnNum}={'s_SOLUS_HPtr', 'Control_paramsPtr'};fcnNum=fcnNum+1;
%  SOLUS_Return SOLUS_CompensateTemperature ( SOLUS_H solus , float temperature ); 
fcns.thunkname{fcnNum}='SOLUS_ReturnvoidPtrfloatThunk';fcns.name{fcnNum}='SOLUS_CompensateTemperature'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='SOLUS_Return'; fcns.RHS{fcnNum}={'s_SOLUS_HPtr', 'single'};fcnNum=fcnNum+1;
%  SOLUS_Return SOLUS_TrimCTMU ( SOLUS_H solus , ADDRESS address , BOOLEAN ctmu_en , INT16 ctmu_trim ); 
fcns.thunkname{fcnNum}='SOLUS_ReturnvoidPtrADDRESSuint8int16Thunk';fcns.name{fcnNum}='SOLUS_TrimCTMU'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='SOLUS_Return'; fcns.RHS{fcnNum}={'s_SOLUS_HPtr', 'ADDRESS', 'uint8', 'int16'};fcnNum=fcnNum+1;
%  SOLUS_Return SOLUS_ProgramSTUSB4500 ( SOLUS_H solus ); 
fcns.thunkname{fcnNum}='SOLUS_ReturnvoidPtrThunk';fcns.name{fcnNum}='SOLUS_ProgramSTUSB4500'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='SOLUS_Return'; fcns.RHS{fcnNum}={'s_SOLUS_HPtr'};fcnNum=fcnNum+1;
%  SOLUS_Return SOLUS_ReadAnalogLogs ( SOLUS_H solus ); 
fcns.thunkname{fcnNum}='SOLUS_ReturnvoidPtrThunk';fcns.name{fcnNum}='SOLUS_ReadAnalogLogs'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='SOLUS_Return'; fcns.RHS{fcnNum}={'s_SOLUS_HPtr'};fcnNum=fcnNum+1;
structs.LD_parameters.packing=1;
structs.LD_parameters.members=struct('DELAY_F', 'uint16#8', 'DELAY_C', 'uint8#8', 'WIDTH_F', 'uint16#8', 'WIDTH_C', 'uint8#8', 'I_FINE', 'uint16#8', 'I_COARSE', 'uint8#8', 'CITR', 'uint8#4', 'SYNCD_F', 'uint16', 'SYNCD_C', 'uint16');
structs.GSIPM_parameters.packing=1;
structs.GSIPM_parameters.members=struct('EN_QUADRANT_1', 'uint8', 'EN_QUADRANT_2', 'uint8', 'EN_QUADRANT_3', 'uint8', 'EN_QUADRANT_4', 'uint8', 'STOP', 'uint8', 'GATE_CLOSE', 'uint8', 'GATE_OPEN', 'uint8');
structs.Control_params.packing=1;
structs.Control_params.members=struct('LD_Voltage', 'uint16', 'SPAD_Voltage', 'uint16', 'GSIPM3v3_Voltage', 'uint16');
structs.Autocal_params.packing=1;
structs.Autocal_params.members=struct('goal', 'uint32', 'meas_time', 'uint16', 'steps', 'uint16', 'start_pos', 'uint16');
structs.s_Sequence_Line.packing=1;
structs.s_Sequence_Line.members=struct('meas_time', 'single', 'attenuation', 'uint16#8', 'gate_delay_coarse', 'uint8#8', 'gate_delay_fine', 'uint16#8', 'laser_num', 'uint8');
structs.Optode_analog_acq.packing=1;
structs.Optode_analog_acq.members=struct('gsipmSPADcurrent', 'int16', 'gsipmCoreCurrent', 'int16', 'laserCurrent', 'int16', 'gsipmSPADvoltage', 'uint16', 'gsipmCoreVoltage', 'uint16', 'laserVoltage', 'uint16', 'picTemperature', 'int16', 'gsipmTemperature', 'uint16', 'bandgap', 'uint16');
structs.Control_analog_acq.packing=1;
structs.Control_analog_acq.members=struct('spadCurrent', 'int16', 'inputCurrent', 'int16', 'spadVoltage', 'uint16', 'inputVoltage', 'uint16', 'p5Volt', 'uint16');
structs.s_LD_Analog.packing=1;
structs.s_LD_Analog.members=struct('ILDK', 'uint16', 'VCI', 'uint16', 'V18', 'uint16', 'VDD', 'uint16', 'Temp', 'uint16');
structs.Frame.packing=1;
structs.Frame.members=struct('intensity_data', 'uint32', 'histogram_data', 'uint16#128', 'Area_ON', 'uint16', 'Optode', 'ADDRESS', 'Status', 'uint16');
structs.s_SOLUS_H.members=struct('');
enuminfo.DataType=struct('Intensity',0,'Int_Hist',1);
enuminfo.ADDRESS=struct('OPTODE1',0,'OPTODE2',1,'OPTODE3',2,'OPTODE4',3,'OPTODE5',4,'OPTODE6',5,'OPTODE7',6,'OPTODE8',7,'CONTROL',8);
enuminfo.SOLUS_Return=struct('OK',0,'COMM_ERROR',-1,'OUT_OF_MEMORY',-2,'INVALID_POINTER',-3,'COMM_TIMEOUT',-4,'OUT_OF_RANGE',-5,'INVALID_OP',-6,'PROBE_ERROR',-7,'FIRMWARE_NOT_COMPATIBLE',-8,'OPTODE_NOT_PRESENT',-9,'FIRMWARE_UPDATE_ERROR',-10,'SEQUENCE_ALREADY_RUNNING',-11,'NO_SEQUENCE_RUNNING',-12);
methodinfo=fcns;